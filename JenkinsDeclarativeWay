pipeline{
agent any

options {
  timestamps()
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5'))
}
triggers {
  pollSCM ('* * * * *')
  //cron ('* * * * *')
}

tools{
maven 'maven 3.8.6' 
}
//This stage will get the source from the github
stages{
stage('checkOutCode'){
steps{
	slackNotifications('STARTED')
git branch: 'development', credentialsId: 'd6a1ed46-5fa2-444d-bff3-6e44da4e8c43', url: 'https://github.com/Seemaa-Patel-Org/maven-web-application.git'
}
}
//This stage will do the build
stage('Build'){
steps{
sh "mvn clean package"
}
}
/*
//This stage will be exexute sonarQube Report
stage('ExecuteSonarQubeReport'){
steps{
sh "mvn clean sonar:sonar"
}
}
//This stage will be Upload Artifacts into Nexus Repo
stage('UpladArtifactIntoArtifactoryRepo'){
steps{
sh "mvn clean deploy"
}
}
//Deploy Application into Tomcat Server
stage('DeployApplicationIntoTomcatServer'){
steps{
sshagent(['5526ab32-4a27-433d-b4ec-cb7fd5338fab']){
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.0.18:/opt/apache-tomcat-9.0.65/webapps"
}
}
*/
}//stages closing
post {
success {
slackNotifications(currentBuild.result)
}
failure {
slackNotifications(currentBuild.result)
}
}
}//pipeline closing

//Code snippet for sending slack notification
 
def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    colorName = 'GREEN'
    colorCode = '#00FF00'
  } else {
    colorName = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (colorName: colorCode, message: summary, channel:"#walmart")

}
